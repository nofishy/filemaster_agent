"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwarmState = exports.addActiveAgentRouter = exports.createSwarm = void 0;
const langgraph_1 = require("@langchain/langgraph");
const handoff_js_1 = require("./handoff.cjs");
/**
 * State schema for the multi-agent swarm.
 */
const SwarmState = langgraph_1.Annotation.Root({
    ...langgraph_1.MessagesAnnotation.spec,
    activeAgent: (langgraph_1.Annotation),
});
exports.SwarmState = SwarmState;
/**
 * Add a router to the currently active agent to the StateGraph.
 *
 * @param builder The graph builder (StateGraph) to add the router to.
 * @param routeTo A list of agent (node) names to route to.
 * @param defaultActiveAgent Name of the agent to route to by default (if no agents are currently active).
 * @returns StateGraph with the router added.
 */
const addActiveAgentRouter = (builder, { routeTo, defaultActiveAgent, }) => {
    if (!routeTo.includes(defaultActiveAgent)) {
        throw new Error(`Default active agent '${defaultActiveAgent}' not found in routes ${routeTo}`);
    }
    const routeToActiveAgent = (state) => {
        return state.activeAgent || defaultActiveAgent;
    };
    builder.addConditionalEdges(langgraph_1.START, routeToActiveAgent, routeTo);
    return builder;
};
exports.addActiveAgentRouter = addActiveAgentRouter;
/**
 * Create a multi-agent swarm.
 *
 * @param agents List of agents to add to the swarm
 * @param defaultActiveAgent Name of the agent to route to by default (if no agents are currently active).
 * @param stateSchema State schema to use for the multi-agent graph.
 * @returns A multi-agent swarm StateGraph.
 */
const createSwarm = ({ agents, defaultActiveAgent, stateSchema, }) => {
    if (stateSchema && !("activeAgent" in stateSchema.spec)) {
        throw new Error("Missing required key 'activeAgent' in stateSchema");
    }
    const agentNames = new Set();
    for (const agent of agents) {
        if (!agent.name || agent.name === "LangGraph") {
            throw new Error("Please specify a name when you create your agent, either via `createReactAgent({ ..., name: agentName })` " +
                "or via `graph.compile({ name: agentName })`.");
        }
        if (agentNames.has(agent.name)) {
            throw new Error(`Agent with name '${agent.name}' already exists. Agent names must be unique.`);
        }
        agentNames.add(agent.name);
    }
    const builder = new langgraph_1.StateGraph(stateSchema ?? SwarmState);
    addActiveAgentRouter(builder, {
        routeTo: [...agentNames],
        defaultActiveAgent,
    });
    for (const agent of agents) {
        builder.addNode(agent.name, agent, {
            ends: (0, handoff_js_1.getHandoffDestinations)(agent),
            subgraphs: [agent],
        });
    }
    return builder;
};
exports.createSwarm = createSwarm;
//# sourceMappingURL=swarm.js.map