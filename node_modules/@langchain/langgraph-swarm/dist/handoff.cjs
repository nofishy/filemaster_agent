"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.METADATA_KEY_HANDOFF_DESTINATION = exports.getHandoffDestinations = exports.createHandoffTool = void 0;
const zod_1 = require("zod");
const messages_1 = require("@langchain/core/messages");
const tools_1 = require("@langchain/core/tools");
const langgraph_1 = require("@langchain/langgraph");
const WHITESPACE_RE = /\s+/;
const METADATA_KEY_HANDOFF_DESTINATION = "__handoff_destination";
exports.METADATA_KEY_HANDOFF_DESTINATION = METADATA_KEY_HANDOFF_DESTINATION;
function _normalizeAgentName(agentName) {
    /**
     * Normalize an agent name to be used inside the tool name.
     */
    return agentName.trim().replace(WHITESPACE_RE, "_").toLowerCase();
}
// type guard
function isDynamicTool(tool) {
    return ("schema" in tool &&
        "name" in tool &&
        "description" in tool &&
        "responseFormat" in tool);
}
const createHandoffTool = ({ agentName, description, }) => {
    /**
     * Create a tool that can handoff control to the requested agent.
     *
     * @param agentName - The name of the agent to handoff control to, i.e.
     *   the name of the agent node in the multi-agent graph.
     *   Agent names should be simple, clear and unique, preferably in snake_case,
     *   although you are only limited to the names accepted by LangGraph
     *   nodes as well as the tool names accepted by LLM providers
     *   (the tool name will look like this: `transfer_to_<agent_name>`).
     * @param description - Optional description for the handoff tool.
     */
    const toolName = `transfer_to_${_normalizeAgentName(agentName)}`;
    const toolDescription = description || `Ask agent '${agentName}' for help`;
    const handoffTool = (0, tools_1.tool)(async (_, config) => {
        /**
         * Ask another agent for help.
         */
        const toolMessage = new messages_1.ToolMessage({
            content: `Successfully transferred to ${agentName}`,
            name: toolName,
            tool_call_id: config.toolCall.id,
        });
        // inject the current agent state
        const state = (0, langgraph_1.getCurrentTaskInput)();
        return new langgraph_1.Command({
            goto: agentName,
            graph: langgraph_1.Command.PARENT,
            update: {
                messages: state.messages.concat(toolMessage),
                activeAgent: agentName,
            },
        });
    }, {
        name: toolName,
        schema: zod_1.z.object({}),
        description: toolDescription,
    });
    handoffTool.metadata = { [METADATA_KEY_HANDOFF_DESTINATION]: agentName };
    return handoffTool;
};
exports.createHandoffTool = createHandoffTool;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getHandoffDestinations = (agent, toolNodeName = "tools") => {
    /**
     * Get a list of destinations from agent's handoff tools.
     *
     * @param agent - The compiled state graph
     * @param toolNodeName - The name of the tool node in the graph
     */
    const { nodes } = agent.getGraph();
    if (!(toolNodeName in nodes)) {
        return [];
    }
    const toolNode = nodes[toolNodeName].data;
    if (!toolNode || !("tools" in toolNode) || !toolNode.tools) {
        return [];
    }
    const { tools } = toolNode;
    return tools
        .filter((tool) => isDynamicTool(tool) &&
        tool.metadata !== undefined &&
        METADATA_KEY_HANDOFF_DESTINATION in tool.metadata)
        .map((tool) => tool.metadata[METADATA_KEY_HANDOFF_DESTINATION]);
};
exports.getHandoffDestinations = getHandoffDestinations;
//# sourceMappingURL=handoff.js.map